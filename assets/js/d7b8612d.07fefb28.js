"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[695],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),d=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=d(e.components);return a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),c=d(n),m=r,k=c["".concat(l,".").concat(m)]||c[m]||u[m]||i;return n?a.createElement(k,o(o({ref:t},p),{},{components:n})):a.createElement(k,o({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=c;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var d=2;d<i;d++)o[d]=n[d];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},1794:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return l},default:function(){return m},frontMatter:function(){return s},metadata:function(){return d},toc:function(){return u}});var a=n(7462),r=n(3366),i=(n(7294),n(3905)),o=["components"],s={sidebar_position:0},l="Guides",d={unversionedId:"guides",id:"guides",title:"Guides",description:"Installation",source:"@site/docs/guides.md",sourceDirName:".",slug:"/guides",permalink:"/react-native-aps/docs/guides",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/guides.md",tags:[],version:"current",sidebarPosition:0,frontMatter:{sidebar_position:0},sidebar:"tutorialSidebar",next:{title:"Exports",permalink:"/react-native-aps/docs/api/"}},p={},u=[{value:"Installation",id:"installation",level:2},{value:"Usage",id:"usage",level:2},{value:"Initializing APS Ads SDK",id:"initializing-aps-ads-sdk",level:3},{value:"Set your app id/key",id:"set-your-app-idkey",level:4},{value:"Ad server/mediator identifier",id:"ad-servermediator-identifier",level:4},{value:"MRAID",id:"mraid",level:4},{value:"Geo location tracking",id:"geo-location-tracking",level:4},{value:"Test mode",id:"test-mode",level:4},{value:"Custom attributes",id:"custom-attributes",level:4},{value:"Requesting Bid (Key-Value pairs)",id:"requesting-bid-key-value-pairs",level:3},{value:"Requesting Bid",id:"requesting-bid",level:4}],c={toc:u};function m(e){var t=e.components,n=(0,r.Z)(e,o);return(0,i.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"guides"},"Guides"),(0,i.kt)("h2",{id:"installation"},"Installation"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"npm install react-native-aps\ncd ios && bundle exec pod install\n")),(0,i.kt)("h2",{id:"usage"},"Usage"),(0,i.kt)("h3",{id:"initializing-aps-ads-sdk"},"Initializing APS Ads SDK"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"import APSAds, { AdNetwork, MRAIDPolicy, TestIds } from 'react-native-aps';\n\n// ...\n\nAPSAds.initialize(TestIds.APS_APP_KEY)\n  .then(() => {\n    APSAds.setAdNetworkInfo({ adNetwork: AdNetwork.GOOGLE_AD_MANAGER }); // Primary ad server / mediation\n    APSAds.setMRAIDPolicy(MRAIDPolicy.DFP); // DFP for Google Ad Manager, Custom for others.\n    APSAds.setMRAIDSupportedVersions(['1.0', '2.0', '3.0']);\n    APSAds.setTestMode(true);\n  })\n")),(0,i.kt)("h4",{id:"set-your-app-idkey"},"Set your app id/key"),(0,i.kt)("p",null,"First, you need to initialize SDK with your APS app id/key by calling ",(0,i.kt)("inlineCode",{parentName:"p"},"APSAds.initialize"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"APSAds.initialize(TestIds.APS_APP_KEY);\n")),(0,i.kt)("h4",{id:"ad-servermediator-identifier"},"Ad server/mediator identifier"),(0,i.kt)("p",null,"Then, you must pass your primary ad server or mediator information with ",(0,i.kt)("inlineCode",{parentName:"p"},"APSAds.setAdNetworkInfo"),"."),(0,i.kt)("p",null,"List of possible ad networks:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"AdNetwork.GOOGLE_AD_MANAGER\nAdNetwork.ADMOB\nAdNetwork.AD_GENERATION\nAdNetwork.IRON_SOURCE\nAdNetwork.MAX\nAdNetwork.NIMBUS\nAdNetwork.OTHER\n")),(0,i.kt)("h4",{id:"mraid"},"MRAID"),(0,i.kt)("p",null,"You also need to pass MRAID info. For Google Ad Manager, you can skip this part."),(0,i.kt)("p",null,"For others, pass ",(0,i.kt)("inlineCode",{parentName:"p"},"MRAIDPolicy.CUSTOM")," to ",(0,i.kt)("inlineCode",{parentName:"p"},"APSAds.setMRAIDPolicy")," like following:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"APSAds.setMRAIDPolicy(MRAIDPolicy.CUSTOM);\n")),(0,i.kt)("p",null,"Then, pass supported MRAID versions of your ad server to ",(0,i.kt)("inlineCode",{parentName:"p"},"setMRAIDSupportedVersions"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"setMRAIDSupportedVersions(['1.0', '2.0', '3.0']);\n")),(0,i.kt)("h4",{id:"geo-location-tracking"},"Geo location tracking"),(0,i.kt)("p",null,"If your app collects geo location to track users, you should call ",(0,i.kt)("inlineCode",{parentName:"p"},"setUseGeolocation"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"setUseGeolocation(true); // false by default\n")),(0,i.kt)("h4",{id:"test-mode"},"Test mode"),(0,i.kt)("p",null,"To enable test mode, call ",(0,i.kt)("inlineCode",{parentName:"p"},"setTestMode"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"setTestMode(true); // false by default\n")),(0,i.kt)("p",null,"Do not forget to remove or pass ",(0,i.kt)("inlineCode",{parentName:"p"},"false")," to ",(0,i.kt)("inlineCode",{parentName:"p"},"setTestMode")," in production, as the test ads are not eligible for monetization."),(0,i.kt)("h4",{id:"custom-attributes"},"Custom attributes"),(0,i.kt)("p",null,"You can also add/remove custom attributes by calling ",(0,i.kt)("inlineCode",{parentName:"p"},"addCustomAttribute")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"removeCustomAttribute"),".\nYou can use this methods to pass contextual parameters or pass the OMID Partner information. More information is available in the APS SDK documentation."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"addCustomAttribute('key', 'value');\nremoveCustomAttribute('key');\n")),(0,i.kt)("h3",{id:"requesting-bid-key-value-pairs"},"Requesting Bid (Key-Value pairs)"),(0,i.kt)("p",null,"Below example shows displaying banner ad with ",(0,i.kt)("inlineCode",{parentName:"p"},"react-native-google-mobile-ads")," library."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"import {\n  AdLoader,\n  AdLoaderOptions,\n  AdType,\n  isAdError,\n  TestIds,\n} from 'react-native-aps';\nimport { BannerAd, BannerAdSize } from 'react-native-google-mobile-ads';\n\n// ...\n\nconst apsOptions: AdLoaderOptions = {\n  slotUUID: TestIds.APS_SLOT_BANNER_320x50,\n  type: AdType.BANNER,\n  size: '320x50',\n};\n\nAdLoader.loadAd(apsOptions)\n  .then((result) => {\n    setApsBidResult(result);\n  })\n  .catch((error) => {\n    if (isAdError(error)) {\n      console.debug(error);\n    }\n  })\n  .finally(() => {\n    setApsBidDone(true);\n  });\n\n// ...\n\n<View>\n  {apsBidDone && (\n    <BannerAd\n      unitId={TestIds.GAM_BANNER}\n      size={BannerAdSize.BANNER}\n      requestOptions={{ customTargeting: apsBidResult }}\n    />\n  )}\n</View>\n")),(0,i.kt)("h4",{id:"requesting-bid"},"Requesting Bid"),(0,i.kt)("p",null,"Request bid to APS via calling ",(0,i.kt)("inlineCode",{parentName:"p"},"AdLoader.loadAd")," with ",(0,i.kt)("inlineCode",{parentName:"p"},"AdLoaderOptions"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"AdLoader.loadAd({\n  slotUUID: TestIds.APS_SLOT_BANNER_320x50,\n  type: AdType.BANNER,\n  size: '320x50',\n})\n")),(0,i.kt)("p",null,"AdLoaderOptions has following properties:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"slotUUID"),": The slotUUID of the ad slot."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"type"),": The ad type of the ad slot. One of ",(0,i.kt)("inlineCode",{parentName:"li"},"AdType.BANNER"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"AdType.INTERSTITIAL"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"size"),": The size of the banner ad slot. Required for banner ad slots."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"customTargeting"),": The optional custom targeting key value pairs for the bid request.")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"AdLoader.loadAd")," returns a promise that resolves to object containing key-value pairs. Using them, request ad with your ad server."),(0,i.kt)("p",null,"In case of Google Ad Manager, pass the key value pairs to ",(0,i.kt)("inlineCode",{parentName:"p"},"requestOptions.customTargeting"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"<View>\n  {apsBidDone && (\n    <BannerAd\n      unitId={TestIds.GAM_BANNER}\n      size={BannerAdSize.BANNER}\n      requestOptions={{ customTargeting: apsBidResult }}\n    />\n  )}\n</View>\n")))}m.isMDXComponent=!0}}]);