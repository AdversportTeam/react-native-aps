{"version":3,"sources":["AdLoader.ts"],"names":["AdLoader","loadAd","adLoaderOptions","e","Error","message","_nativeModule","error","userInfo","AdError","fromNativeError","skadnHelper","name","info","Platform","OS","RNAPSAdLoaderModule"],"mappings":";;;;;;;AAOA;;AACA;;AACA;;AACA;;;;;;AAKA;AACA;AACA;AACO,MAAMA,QAAN,CAAe;AAGpB;AACF;AACA;AACA;AACA;AACA;AACA;AACqB,eAANC,MAAM,CACjBC,eADiB,EAEmB;AACpC,QAAI;AACF,oDAAwBA,eAAxB;AACD,KAFD,CAEE,OAAOC,CAAP,EAAU;AACV,UAAIA,CAAC,YAAYC,KAAjB,EAAwB;AACtB,cAAM,IAAIA,KAAJ,CAAW,sBAAqBD,CAAC,CAACE,OAAQ,EAA1C,CAAN;AACD;AACF;;AAED,QAAI;AACF,aAAO,MAAML,QAAQ,CAACM,aAAT,CAAuBL,MAAvB,CAA8BC,eAA9B,CAAb;AACD,KAFD,CAEE,OAAOK,KAAP,EAAc;AACd,UAAKA,KAAD,CAAeC,QAAnB,EAA6B;AAC3B,cAAMC,iBAAQC,eAAR,CAAwBH,KAAxB,CAAN;AACD,OAFD,MAEO;AACL,cAAMA,KAAN;AACD;AACF;AACF;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;AACoB,SAAXI,WAAW,CAACC,IAAD,EAAeC,IAAf,EAA6B;AAC7C,QAAI,OAAOD,IAAP,KAAgB,QAApB,EAA8B;AAC5B,YAAM,IAAIR,KAAJ,CAAU,wDAAV,CAAN;AACD;;AACD,QAAI,OAAOS,IAAP,KAAgB,QAApB,EAA8B;AAC5B,YAAM,IAAIT,KAAJ,CAAU,wDAAV,CAAN;AACD;;AACD,QAAIU,sBAASC,EAAT,KAAgB,KAApB,EAA2B;AACzB;AACD;;AACD,WAAOf,QAAQ,CAACM,aAAT,CAAuBK,WAAvB,CAAmCC,IAAnC,EAAyCC,IAAzC,CAAP;AACD;;AAlDmB;;;;gBAATb,Q,mBACoBgB,uB","sourcesContent":["/*\n * Copyright (c) 2022-present Adversport & Contributors\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { Platform } from 'react-native';\nimport { AdError } from './AdError';\nimport RNAPSAdLoaderModule from './internal/AdLoaderModule';\nimport {\n  AdLoaderOptions,\n  validateAdLoaderOptions,\n} from './types/AdLoaderOptions';\n\n/**\n * @public\n */\nexport class AdLoader {\n  private static _nativeModule = RNAPSAdLoaderModule;\n\n  /**\n   * Request APS for a bid. Only a single ad size and slotUUID is supported per bid request.\n   * @param adLoaderOptions - `AdLoaderOptions` object used to configure the bid request.\n   * @returns Key value pairs of returned bid response.\n   *\n   * @public\n   */\n  static async loadAd(\n    adLoaderOptions: AdLoaderOptions\n  ): Promise<{ [key: string]: string }> {\n    try {\n      validateAdLoaderOptions(adLoaderOptions);\n    } catch (e) {\n      if (e instanceof Error) {\n        throw new Error(`AdLoader.loadAd(*) ${e.message}`);\n      }\n    }\n\n    try {\n      return await AdLoader._nativeModule.loadAd(adLoaderOptions);\n    } catch (error) {\n      if ((error as any).userInfo) {\n        throw AdError.fromNativeError(error);\n      } else {\n        throw error;\n      }\n    }\n  }\n\n  /**\n   * In order for SKAdNetwork to work, pass the app event.\n   * @param name - The name of the event.\n   * @param info - The data/info with the event.\n   *\n   * @public\n   */\n  static skadnHelper(name: string, info: string) {\n    if (typeof name !== 'string') {\n      throw new Error(\"AdLoader.skadnHelper(*) 'name' expected a string value\");\n    }\n    if (typeof info !== 'string') {\n      throw new Error(\"AdLoader.skadnHelper(*) 'info' expected a string value\");\n    }\n    if (Platform.OS !== 'ios') {\n      return;\n    }\n    return AdLoader._nativeModule.skadnHelper(name, info);\n  }\n}\n"]}