{"version":3,"sources":["APSAds.ts"],"names":["APSAds","initialize","appKey","Error","_nativeModule","setAdNetworkInfo","adNetworkInfo","e","message","setMRAIDSupportedVersions","versions","Array","isArray","every","v","setMRAIDPolicy","policy","setTestMode","enabled","setUseGeoLocation","addCustomAttribute","key","value","removeCustomAttribute","AdsModule"],"mappings":";;;;;;;AAOA;;AACA;;AACA;;;;;;AAEO,MAAMA,MAAN,CAAa;AAGD,SAAVC,UAAU,CAACC,MAAD,EAAiB;AAChC,QAAI,OAAOA,MAAP,KAAkB,QAAtB,EAAgC;AAC9B,YAAM,IAAIC,KAAJ,CAAU,sDAAV,CAAN;AACD;;AACD,WAAO,KAAKC,aAAL,CAAmBH,UAAnB,CAA8BC,MAA9B,CAAP;AACD;;AAEsB,SAAhBG,gBAAgB,CAACC,aAAD,EAA+B;AACpD,QAAI;AACF,gDAAsBA,aAAtB;AACD,KAFD,CAEE,OAAOC,CAAP,EAAU;AACV,UAAIA,CAAC,YAAYJ,KAAjB,EAAwB;AACtB,cAAM,IAAIA,KAAJ,CAAW,8BAA6BI,CAAC,CAACC,OAAQ,EAAlD,CAAN;AACD;AACF;;AACD,WAAO,KAAKJ,aAAL,CAAmBC,gBAAnB,CAAoCC,aAApC,CAAP;AACD;;AAE+B,SAAzBG,yBAAyB,CAACC,QAAD,EAAqB;AACnD,QACE,CAACC,KAAK,CAACC,OAAN,CAAcF,QAAd,CAAD,IACA,CAACA,QAAQ,CAACG,KAAT,CAAgBC,CAAD,IAAO,OAAOA,CAAP,KAAa,QAAnC,CAFH,EAGE;AACA,YAAM,IAAIX,KAAJ,CACJ,mFADI,CAAN;AAGD;;AACD,WAAO,KAAKC,aAAL,CAAmBK,yBAAnB,CAA6CC,QAA7C,CAAP;AACD;;AAEoB,SAAdK,cAAc,CAACC,MAAD,EAAsB;AACzC,QAAI,CAAC,gCAAcA,MAAd,CAAL,EAA4B;AAC1B,YAAM,IAAIb,KAAJ,CACJ,sEADI,CAAN;AAGD;;AACD,WAAO,KAAKC,aAAL,CAAmBW,cAAnB,CAAkCC,MAAlC,CAAP;AACD;;AAEiB,SAAXC,WAAW,CAACC,OAAD,EAAmB;AACnC,QAAI,OAAOA,OAAP,KAAmB,SAAvB,EAAkC;AAChC,YAAM,IAAIf,KAAJ,CACJ,0DADI,CAAN;AAGD;;AACD,WAAO,KAAKC,aAAL,CAAmBa,WAAnB,CAA+BC,OAA/B,CAAP;AACD;;AAEuB,SAAjBC,iBAAiB,CAACD,OAAD,EAAmB;AACzC,QAAI,OAAOA,OAAP,KAAmB,SAAvB,EAAkC;AAChC,YAAM,IAAIf,KAAJ,CACJ,gEADI,CAAN;AAGD;;AACD,WAAO,KAAKC,aAAL,CAAmBe,iBAAnB,CAAqCD,OAArC,CAAP;AACD;;AAEwB,SAAlBE,kBAAkB,CAACC,GAAD,EAAcC,KAAd,EAA6B;AACpD,QAAI,OAAOD,GAAP,KAAe,QAAnB,EAA6B;AAC3B,YAAM,IAAIlB,KAAJ,CACJ,4DADI,CAAN;AAGD;;AACD,QAAI,OAAOmB,KAAP,KAAiB,QAArB,EAA+B;AAC7B,YAAM,IAAInB,KAAJ,CACJ,iEADI,CAAN;AAGD;;AACD,WAAO,KAAKC,aAAL,CAAmBgB,kBAAnB,CAAsCC,GAAtC,EAA2CC,KAA3C,CAAP;AACD;;AAE2B,SAArBC,qBAAqB,CAACF,GAAD,EAAc;AACxC,QAAI,OAAOA,GAAP,KAAe,QAAnB,EAA6B;AAC3B,YAAM,IAAIlB,KAAJ,CACJ,+DADI,CAAN;AAGD;;AACD,WAAO,KAAKC,aAAL,CAAmBmB,qBAAnB,CAAyCF,GAAzC,CAAP;AACD;;AAjFiB;;;;gBAAPrB,M,mBACsBwB,kB","sourcesContent":["/*\n * Copyright (c) 2022-present Adversport & Contributors\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport AdsModule from './internal/AdsModule';\nimport { AdNetworkInfo, validateAdNetworkInfo } from './types/AdNetworkInfo';\nimport { isMRAIDPolicy, MRAIDPolicy } from './types/MRAIDPolicy';\n\nexport class APSAds {\n  protected static _nativeModule = AdsModule;\n\n  static initialize(appKey: string) {\n    if (typeof appKey !== 'string') {\n      throw new Error(\"APSAds.initialze(*) 'appKey' expected a string value\");\n    }\n    return this._nativeModule.initialize(appKey);\n  }\n\n  static setAdNetworkInfo(adNetworkInfo: AdNetworkInfo) {\n    try {\n      validateAdNetworkInfo(adNetworkInfo);\n    } catch (e) {\n      if (e instanceof Error) {\n        throw new Error(`APSAds.setAdNetworkInfo(*) ${e.message}`);\n      }\n    }\n    return this._nativeModule.setAdNetworkInfo(adNetworkInfo);\n  }\n\n  static setMRAIDSupportedVersions(versions: string[]) {\n    if (\n      !Array.isArray(versions) ||\n      !versions.every((v) => typeof v === 'string')\n    ) {\n      throw new Error(\n        \"APSAds.setMRAIDSupportedVersions(*) 'versions' expected an array of string values\"\n      );\n    }\n    return this._nativeModule.setMRAIDSupportedVersions(versions);\n  }\n\n  static setMRAIDPolicy(policy: MRAIDPolicy) {\n    if (!isMRAIDPolicy(policy)) {\n      throw new Error(\n        \"APSAds.setMRAIDPolicy(*) 'policy' expected one of MRAIDPolicy values\"\n      );\n    }\n    return this._nativeModule.setMRAIDPolicy(policy);\n  }\n\n  static setTestMode(enabled: boolean) {\n    if (typeof enabled !== 'boolean') {\n      throw new Error(\n        \"APSAds.setTestMode(*) 'enabled' expected a boolean value\"\n      );\n    }\n    return this._nativeModule.setTestMode(enabled);\n  }\n\n  static setUseGeoLocation(enabled: boolean) {\n    if (typeof enabled !== 'boolean') {\n      throw new Error(\n        \"APSAds.setUseGeoLocation(*) 'enabled' expected a boolean value\"\n      );\n    }\n    return this._nativeModule.setUseGeoLocation(enabled);\n  }\n\n  static addCustomAttribute(key: string, value: string) {\n    if (typeof key !== 'string') {\n      throw new Error(\n        \"APSAds.addCustomAttribute(*) 'key' expected a string value\"\n      );\n    }\n    if (typeof value !== 'string') {\n      throw new Error(\n        \"APSAds.addCustomAttribute(_, *) 'value' expected a string value\"\n      );\n    }\n    return this._nativeModule.addCustomAttribute(key, value);\n  }\n\n  static removeCustomAttribute(key: string) {\n    if (typeof key !== 'string') {\n      throw new Error(\n        \"APSAds.removeCustomAttribute(*) 'key' expected a string value\"\n      );\n    }\n    return this._nativeModule.removeCustomAttribute(key);\n  }\n}\n"]}