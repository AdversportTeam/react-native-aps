ext.safeExtGet = {prop, fallback ->
  rootProject.ext.has(prop) ? rootProject.ext.get(prop) : fallback
}

if (isNewArchitectureEnabled()) {
  apply plugin: "com.facebook.react"
}
apply plugin: 'com.android.library'

android {
  compileSdkVersion safeExtGet('compileSdkVersion', 31)

  defaultConfig {
    minSdkVersion safeExtGet('minSdkVersion', 21)
    targetSdkVersion safeExtGet('targetSdkVersion', 31)
    versionCode 1
    versionName "1.0"
    buildConfigField "boolean", "IS_NEW_ARCHITECTURE_ENABLED", isNewArchitectureEnabled().toString()
    
  }
  

  buildTypes {
    release {
      minifyEnabled false
      consumerProguardFiles 'proguard-rules.pro'
    }
  }
}

repositories {
  mavenCentral()
  google()
}

dependencies {
  if (isNewArchitectureEnabled()) {
    implementation("com.facebook.react:react-android")
  } else {
    implementation 'com.facebook.react:react-native:+'
  }
  implementation ("com.amazon.android:aps-sdk:9.4.2")
}

if (isNewArchitectureEnabled()) {
  react {
    libraryName = "rnaps"
    codegenJavaPackageName = "com.adversport.rnaps"
    root = rootProject.file("..")
    jsRootDir = file("../src/turbomodules")
    reactNativeDir = rootProject.file("../node_modules/react-native/")
    codegenDir = rootProject.file("../node_modules/react-native-codegen/")
  }
}

def safeExtGet(prop, fallback) {
  rootProject.ext.has(prop) ? rootProject.ext.get(prop) : fallback
}

def isNewArchitectureEnabled() {
  // To opt-in for the New Architecture, you can either:
  // - Set `newArchEnabled` to true inside the `gradle.properties` file
  // - Invoke gradle with `-newArchEnabled=true`
  // - Set an environment variable `ORG_GRADLE_PROJECT_newArchEnabled=true`
  return project.hasProperty("newArchEnabled") && project.newArchEnabled == "true"
}
